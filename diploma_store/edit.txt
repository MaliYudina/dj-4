Теперь по коду.

Если я запускаю проект, то получаю ошибку:

(netology) ➜  diploma_store git:(master) ./manage.py runserver
Traceback (most recent call last):
  File "./manage.py", line 21, in <module>
    main()
  ...
  File "/Users/prokaktus/.virtualenvs/netology/lib/python3.7/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1006, in _gcd_import
  File "<frozen importlib._bootstrap>", line 983, in _find_and_load
  File "<frozen importlib._bootstrap>", line 965, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'ckeditor'
Т.е. вы добавляли сторонние библиотеки, но они не указаны в requirements.txt:

(netology) ➜  diploma_store git:(master) cat requirements.txt
Django==2.2
pytz==2019.1
sqlparse==0.3.0
Все сторонние зависимости нужно фиксировать и указывать в requirements.txt.

@TODO ИСПРАВЛЕНО

db.sqlite3 - не стоит класть в репозиторий, так как это база данных. Лучше добавлять json представления только необходимых объектов через dumpdata/loaddata.

https://github.com/MaliYudina/dj-4/blob/013cba40f6275b002254721547545fd69adf1f35/diploma_store/articles/views.py#L8
Какая логика здесь ожидается, если if не выполнится? Сейчас будет обращение к необъявленной переменной.

@TODO имена статей и имена урлов не одинаковые - может стрипом?

Хорошо, что вы во все правила урлом добавляете name!

https://github.com/MaliYudina/dj-4/blob/013cba40f6275b002254721547545fd69adf1f35/diploma_store/cart/views.py#L15
Здесь очень круто, что вы завели переменную next_ с подчеркиванием, так как вы не перекрыли стандартную функцию next.

https://github.com/MaliYudina/dj-4/blob/013cba40f6275b002254721547545fd69adf1f35/diploma_store/customers/views.py#L44-L47
В принципе, так можно писать, но рекомендуется там, где очень просто обойтись без исключений, их не использовать. Во-первых, во многих языках программирования исключений нет или ими не удобно пользоваться, во-вторых, код без исключений проще читать, потому что он работает последовательно.

Здесь гораздо проще выглядит:

if 'cart in request.session:
    del request.session['cart']

@TODO ИСПРАВЛЕНО

Хорошо что добавили context_processors для общего контекста!


https://github.com/MaliYudina/dj-4/blob/013cba40f6275b002254721547545fd69adf1f35/diploma_store/templates/base.html#L16-L18

Такую логику лучше делать через блоки в шаблонах. Например, вы объявляете блок:

{% block header %}
    {% include "header.html" %}
{% endblock %}
И переопределяется пустым в шаблонах для логина и регистрации.

@TODO кажется ИСПРАВЛЕНО

https://github.com/MaliYudina/dj-4/blob/013cba40f6275b002254721547545fd69adf1f35/diploma_store/templates/header.html#L19

Обратите внимание, что в контекст процессоре вы делаете запрос:

{'menu': Section.objects.all()}
И получается, что для каждой категории вам нужно делать еще дополнительный запрос к бд. Стоит использовать prefetch_related, который позволит получить все секции и связанные категории за константное число запросов (а именно - за 2): https://docs.djangoproject.com/en/2.2/ref/models/querysets/#prefetch-related

В текущей реализации число запросов будет линейным. 1 запрос на секции и по 1 доп запросу на категории каждой секции.

Анализировать число запросов можно в том числе с помощью django debug toolbar: https://django-debug-toolbar.readthedocs.io/en/latest/

На этом пока все по комментариям. В целом, работа довольно качественная! Если будут вопросы, задавайте!